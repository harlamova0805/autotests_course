# Напишите функцию multiplication_chain, которая принимает положительное число num,
# и возвращает количество раз count_multy, которое вы должны перемножить цифры числа num и полученных произведений,
# пока не получите одну цифру.
# Например (Ввод --> Вывод) :
#
# 39 --> 3 (потому что 3*9 = 27, 2*7 = 14, 1*4 = 4, вот 4 одна цифра. Итого 3 итерации)
# 999 --> 4 (потому что 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, наконец 1*2 = 2, Итого 4 итерации)
# 4 --> 0 (4 уже одна цифра, а значит мы проделали 0 итераций)

def multiplication_chain(num):
    count_multy = 0  # Изначально количество итераций равно 0
    while len(str(num)) > 1:
        # Работаем со строками, пока длина стоки больше 1 символа (так проще, чем делить числа на 10 с остатком и без)
        mult = 1  # Произведение цифр начальное
        for digit in str(num):  # Перебираем все элементы строки с нулевого и до конца строки
            mult = mult * int(digit)  # Перемножаем все цифры
        num = mult  # Заменяем первоначальное число на произведение цифр этого числа, чтобы далее перемножать уже цифры
        # из полученного произведения
        count_multy += 1  # Количество итерация увеличивается
    return count_multy


# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    39, 4, 25, 999, 5050, 222333444
]

test_data = [
    3, 0, 2, 4, 1, 4
]

for i, d in enumerate(data):
    assert multiplication_chain(d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')
